import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Navbar from './components/navbar/index';
import Footer from './components/footer/index';
import Buttons from './components/button/buttons';
import Projects from './components/project/index';
import data_skill from './data/index';
//import writer from './utils';
import firebase from './database/database.js';
import '../node_modules/devicon-2.2/devicon.css';
import './App.css';

const strSubtitle = `Un développeur front-end, diplômé d’un Master I en design produit (DSAA). Vous pouvez me trouver sur &lt;span&gt;Linkedin, Twitter et Github.`
const str_presentation = 'Salut, je m’appelle\nRonald Marcel!';

class App extends Component {
  constructor(props){
    super(props);

    this.updateShowSkill = this.updateShowSkill.bind(this);
    this.sayHello = this.sayHello.bind(this);
    this.randomKey = this.randomKey.bind(this);
    this.magicNumber = this.randomKey(data_skill.length);
    this.state = {
      presentation: '',
      strSubtitle: '',
      skill: data_skill[this.magicNumber].percent,
      projects: [],
      strCntrHome: 0,
      shouldCreateCursor: false,
      nextWriting: false
    }
  }

  componentDidMount() {

  /**
   *  Set skill when component did mount
   **/

    const database = firebase.database();
    let dbRefProject = database.ref('projects')
    dbRefProject.on("value", snapshot => {
      let projects = snapshot.val()
      console.log(projects);
      this.setState({projects})
    })

  /**
   *  Launch Writer
   **/

    this.startWritingH1=()=>{
      setTimeout(() => {
        this.timerWriter = setInterval(() => this.sayHello(str_presentation, 'presentation', true), 120)
      },2000)
    }
    this.startWritingH1()

    this.startWritingP=()=>{
      setTimeout(() => {
        this.timerWriter = setInterval(() => this.sayHello(strSubtitle, 'strSubtitle', false), 120)
      },500)
    }

  }

  componentDidUpdate(prevProps, prevState) {

    if(this.state.nextWriting && this.state.strSubtitle.length === 0){
      console.log("Je suis :"+ this.state.nextWriting);
      this.setState({nextWriting: false})

      clearTimeout(this.startWritingH1)

      this.startWritingP();
    }

  }

    sayHello(str, stateName, cursor){

    if(this.state.strCntrHome > str.length-1){
      this.setState((prevState, props) => ({
        strCntrHome: 0,
        nextWriting: true
      }))

      clearInterval(this.timerWriter);
    }else{
      if(!cursor && !this.state.shouldCreateCursor){
        this.setState((prevState, props) => ({shouldCreateCursor: true}))
      }

      this.setState((prevState, props) => ({
        [stateName]: prevState[stateName]+ str[prevState.strCntrHome],
        strCntrHome: prevState.strCntrHome + 1
      }))
    }
  }

  randomKey(max){
    let number= Math.floor( Math.random() * max )
    return number;
  }

  /**
   *  Handle
   **/

  updateShowSkill(newSkill) {
    let newRestSkill = Math.abs(Number(this.state.skill - newSkill));
    let currentSkill = Number(this.state.skill);

    function timerUpdate() {
      if(currentSkill < newSkill){
        if(newRestSkill <= 0){
          clearInterval(timerUpdate);
        } else {
          currentSkill++;
          this.setState({skill: currentSkill});
          newRestSkill--;
        }
      } else {
        if(newRestSkill <= 0) {
          clearInterval(timerUpdate);
        } else {
          currentSkill--;
          this.setState({skill: currentSkill});
          newRestSkill--;
        }
      }
    }

    setInterval(timerUpdate.bind(this), 50);
  }

  render() {

    let appendCursorP = this.state.shouldCreateCursor ? <span className="cursor">_</span> : null;
    let appendCursorH = !this.state.shouldCreateCursor ? <span className="cursor">_</span> : null;

    return (
      <div>
        <Navbar/>
        <div className='intro'>
          <div className='picture-wrapper'>
            <div className='inner'></div>
          </div>
          <h1 className='presentation-header'>
            {this.state.presentation}
            {appendCursorH}
          </h1>
          <code className='subtitle-header'>
            {this.state.strSubtitle}
            {appendCursorP}
          </code>
        </div>
  {/* Container Skill */}
        <div className='container-skill'>
          <p className='text-background'>À propos</p>
          <div>
            <h2>En quelque mots…</h2>
            <p className='content-text'>Le développement web m’est devenu une passion lors de ma formation sur Wordpress en DSAA.<br/>Puis, j’ai eu l’opportunité d’intégrer la Code Académie à Rennes pour une durée de 8 mois, ce qui m’a permis d’acquérir et développer de nouvelles compétences dans les langages web et d’adopter une autre méthode de travail (SCRUM).</p>
            <div>
              <span className='skill-percent'>{this.state.skill}%</span>
              <Buttons
                magicnumber={ this.magicNumber }
                containerButton={'container-buttons'}
                defaultClass={'button-skill'}
                changeSkill={this.updateShowSkill}
                classSelected={'button-selected'}
                dataButton={data_skill}
                opt={'percent'}/>
            </div>
          </div>
        </div>
  {/* Container projects */}
        <div id='project' className='container-project'>
          <div className='filter-bloc'>
            <p>
              Filtre:
            </p>
            <Buttons
              e= "ddd"
              containerButton={'filters'}
              defaultClass={'button-filter'}
              changeSkill={this.updateShowSkill}
              classSelected={'filter-selected'}
              dataButton={['Tout','Website','Design']}
              opt={''}/>
          </div>
          <Projects dataProject={ this.state.projects } />
        </div>
  {/* Container footer */}
        <Footer />
      </div>
    );
  }
}
App.propTypes = {
  changeSkill: PropTypes.func,
}
export default App;
